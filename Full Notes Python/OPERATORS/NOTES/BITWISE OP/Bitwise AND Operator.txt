				=================================================
						3. Bitwise AND Operator (& )
				=================================================
Syntax:           varname= Value1 & Value2
------------
=>The Functionality of Bitwise AND Operator (& ) is shown in the following Truth Table
				----------------------------------------------------------------------
					Value1	Value2	 Value1 & Value2
				----------------------------------------------------------------------
					   0		  0			0		
					   0		  1			0
					   1		  0			0
					   1		  1			1
				----------------------------------------------------------------------
--------------------------
Example-1
--------------------------
>>> 0&0-----------------------0
>>> 0&1-----------------------0
>>> 1&0-----------------------0
>>> 1&1-----------------------1
--------------------------
Example-2
--------------------------
>>> a=4----------------------------0100
>>> b=5----------------------------0101
					-----------------------
>>> c=a&b				0100
>>> print(c)----------------------------4
>>> print(5&9)-------------------------1
>>> print(10&15)---------------------10
>>> 10 and 15-------------------------15
>>> 1.2 and 3.4-----------------------3.4
>>> 1.2&3.4----------------------------TypeError: unsupported operand type(s) for &: 'float' and 'float'
>>> "Python" and "C"--------------'C'
>>> "Python" & "C"-------------------TypeError: unsupported operand type(s) for &: 'str' and 'str'
>>> print(10&20)----------------------0
---------------------------------------
Example-3---Special 
---------------------------------------
>>> s1={10,20,30}
>>> s2={20,35,15}
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))-----------------{20} <class 'set'>
     ----------------OR---------------------			
>>> s1={10,20,30}
>>> s2={20,35,15}
>>> s3=s1&s2
>>> print(s3,type(s3))------------------{20} <class 'set'>
------------------------------------------
>>> s1={10,20,30}
>>> s2={15,25,35}
>>> s3=s1&s2
>>> print(s3,type(s3))------------------set() <class 'set'>
-------------------------------------------
>>> s1={1.2,2.2,3.4}
>>> s2={2.2,3.4,5.6}
>>> s3=s1&s2
>>> print(s3,type(s3))--------------------{2.2, 3.4} <class 'set'>
>>> 2.2&2.2----------------------------------TypeError: unsupported operand type(s) for &: 'float' and 'float'
-------------------------------------------
>>> s1={"Apple","Mango","Kiwi"}
>>> s2={"Mango","Guava","Sberry"}
>>> s3=s1&s2
>>> print(s3,type(s3))------------------------{'Mango'} <class 'set'>
======================================x=================================================

