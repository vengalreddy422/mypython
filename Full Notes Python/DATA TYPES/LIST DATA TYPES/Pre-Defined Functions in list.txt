				=====================================================
							Pre-Defined Functions in list
				=====================================================
=>We know that, on the object of list, we can Perform the Following Operations. 
		1. Indexing Operation to get Single Element.
		2. Slicing Operation to get Range of Values.
		3. We modify Single Element based on Indexing.
		4. We modify Range of Elements based on Slicing.
=>Along with the  Above Operations, we can perform Various Other Operations by using Pre-Defined Functions Present in list object. They are
---------------------------------------------------------------------------------------------------------------------------------------------------------------
1. append()
---------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    listobj.append(Value)
=>This Function is used for Adding Value at the end Existing Elements of List (Called appending).
------------------------
Examples
------------------------
>>> lst=[10,"RS",34.56]
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 34.56] <class 'list'> 1669711789248
>>> lst.append(True)
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 34.56, True] <class 'list'> 1669711789248
>>> lst.append("NL")
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 34.56, True, 'NL'] <class 'list'> 1669711789248
-----------------
>>> lst=[]
>>> print(lst,type(lst),id(lst))-------------[] <class 'list'> 1669711785088
>>> len(lst)-----------------------------------0
>>> lst.append(10)
>>> lst.append(True)
>>> lst.append(1.2)
>>> print(lst,type(lst),id(lst))-----------[10, True, 1.2] <class 'list'> 1669711785088
>>> len(lst)---------------------------------3
---------------------------------------------------------------------------------------------------------------------------------------------------------------
2. insert()
---------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   lstobj.insert(index,Value)
=>This Function is used for Adding a Value at Perticular Index and the Index can be +Ve or -Ve
=>If the we specify Invalid +VE Index the that Element added at Last.
=>If the we specify Invalid -VE Index the that Element added at First.
-------------------------------
Examples
-------------------------------
>>> lst=[10,"RS",45.67,"Python"]
>>> print(lst,type(lst),id(lst))----------------------[10, 'RS', 45.67, 'Python'] <class 'list'> 2331967368064
>>> lst.insert(2,True)
>>> print(lst,type(lst),id(lst))-----------------------[10, 'RS', True, 45.67, 'Python'] <class 'list'> 2331967368064
>>> lst.insert(1,"Guido")
>>> print(lst,type(lst),id(lst))----------------------[10, 'Guido', 'RS', True, 45.67, 'Python'] <class 'list'> 2331967368064
------------------
>>> lst=[10,"RS",45.67,"Python"]
>>> print(lst,type(lst),id(lst))-----------[10, 'RS', 45.67, 'Python'] <class 'list'> 2331967419008
>>> lst.insert(-1,True)
>>> print(lst,type(lst),id(lst))----------[10, 'RS', 45.67, True, 'Python'] <class 'list'> 2331967419008
-----------------------------
>>> lst=[10,"RS",45.67,"Python"]
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 45.67, 'Python'] <class 'list'> 2331967414272
>>> len(lst)---------------------------4
>>> lst.insert(len(lst),"PYTHON")
>>> print(lst,type(lst),id(lst))----------[10, 'RS', 45.67, 'Python', 'PYTHON'] <class 'list'> 2331967414272
-----------------
MOST IMP
-----------------
>>> lst=[10,"RS",45.67,"Python"]
>>> print(lst,type(lst),id(lst))-------------------[10, 'RS', 45.67, 'Python'] <class 'list'> 2331967446080
>>> lst.insert(3000,"HYD")
>>> print(lst,type(lst),id(lst))------------------[10, 'RS', 45.67, 'Python', 'HYD'] <class 'list'> 2331967446080
>>> lst.insert(-5000,"HYD")
>>> print(lst,type(lst),id(lst))-------------------['HYD', 10, 'RS', 45.67, 'Python', 'HYD'] <class 'list'> 2331967446080
--------------------------------------------------------------------------------------------------------------------------------------------------------------
3. remove()------------------Value Based Removal
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   listobj.remove(Value)
=>This Function is used for Removing First Occurence of Specified Value.
=>If the Specified  Value does not Exist then we get ValueError.
-------------------------
Examples
------------------------
>>> lst=[10,"RS",45.67,"Python"]
>>> print(lst,type(lst),id(lst))------------[10, 'RS', 45.67, 'Python'] <class 'list'> 2331967443520
>>> lst.remove("RS")
>>> print(lst,type(lst),id(lst))----------[10, 45.67, 'Python'] <class 'list'> 2331967443520
>>> lst.remove("Python")
>>> print(lst,type(lst),id(lst))-----------[10, 45.67] <class 'list'> 2331967443520
>>> lst.remove("RS")---------------------ValueError: list.remove(x): x not in list
--------------------------------
>>> lst1=[10,20,30,10,20,40,10,20,50,60]
>>> print(lst1,type(lst1),id(lst1))------------------[10, 20, 30, 10, 20, 40, 10, 20, 50, 60] <class 'list'> 2331967413888
>>> lst1.remove(10)
>>> print(lst1,type(lst1),id(lst1))------------------[20, 30, 10, 20, 40, 10, 20, 50, 60] <class 'list'> 2331967413888
>>> lst1.remove(10)
>>> print(lst1,type(lst1),id(lst1))------------------[20, 30, 20, 40, 10, 20, 50, 60] <class 'list'> 2331967413888
>>> lst1.remove(10)
>>> print(lst1,type(lst1),id(lst1))------------------[20, 30, 20, 40, 20, 50, 60] <class 'list'> 2331967413888
>>> lst1.remove(20)
>>> print(lst1,type(lst1),id(lst1))------------------[30, 20, 40, 20, 50, 60] <class 'list'> 2331967413888
-------------------
>>> [].remove(10)---------------ValueError: list.remove(x): x not in list
>>> list().remove(0)-------------ValueError: list.remove(x): x not in list
--------------------------------------------------------------------------------------------------------------------------------------------------------------
4. pop(index)---Index Based Removal
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:  listobj.pop(index)
=>This Function removes the Value from list object Based on Index .
=>If we give Invalid Index then we get IndexError.
-------------------------
Examples
-------------------------
>>> lst1=[10,20,30,10,20,40,10,20,50,60]
>>> print(lst1,type(lst1),id(lst1))---------------[10, 20, 30, 10, 20, 40, 10, 20, 50, 60] <class 'list'> 2331967446592
>>> lst1.pop(-7)------------------------------------10
>>> print(lst1,type(lst1),id(lst1))---------------[10, 20, 30, 20, 40, 10, 20, 50, 60] <class 'list'> 2331967446592
>>> lst1.pop(0)---------------------------------------10
>>> print(lst1,type(lst1),id(lst1))---------------[20, 30, 20, 40, 10, 20, 50, 60] <class 'list'> 2331967446592
>>> lst1.pop(2)--------------------------------------20
>>> print(lst1,type(lst1),id(lst1))--------------[20, 30, 40, 10, 20, 50, 60] <class 'list'> 2331967446592
>>> lst1.pop(100)----------------------------------IndexError: pop index out of range
-------------------------------
>>> [].pop(10)--------------IndexError: pop from empty list
>>> list().pop(0)-----------IndexError: pop from empty list
-------------------------------
>>> lst1=[10,20,30,10,20,40,10,20,50,60]
>>> print(lst1,type(lst1),id(lst1))----------------------[10, 20, 30, 10, 20, 40, 10, 20, 50, 60] <class 'list'> 2331967439552
>>> lst1.pop(len(lst1)-1)--------------------------------60
>>> print(lst1,type(lst1),id(lst1))---------------------[10, 20, 30, 10, 20, 40, 10, 20, 50] <class 'list'> 2331967439552
>>> lst1.pop(-len(lst1))---------------------------------10
>>> print(lst1,type(lst1),id(lst1))---------------------[20, 30, 10, 20, 40, 10, 20, 50] <class 'list'> 2331967439552
--------------------------------------------------------------------------------------------------------------------------------------------------------------
5. pop()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   listobj.pop()
=>This Function removes the Last Element from List Object.
=>When we call this Function on empty list then we get IndexError.
----------------------------
Examples
----------------------------
>>> lst1=[10,20,30,10,20]
>>> print(lst1,type(lst1),id(lst1))------------------[10, 20, 30, 10, 20] <class 'list'> 2331967448256
>>> lst1.pop()------------------------------------------20
>>> print(lst1,type(lst1),id(lst1))------------------[10, 20, 30, 10] <class 'list'> 2331967448256
>>> lst1.pop()----------------------------------------------10
>>> print(lst1,type(lst1),id(lst1))---------------------[10, 20, 30] <class 'list'> 2331967448256
>>> lst1.pop()---------------------------------------------30
>>> print(lst1,type(lst1),id(lst1))-------------------[10, 20] <class 'list'> 2331967448256
>>> lst1.pop()----------------------------------------------20
>>> print(lst1,type(lst1),id(lst1))----------------------[10] <class 'list'> 2331967448256
>>> lst1.pop()----------------------------------------------10
>>> print(lst1,type(lst1),id(lst1))---------------------[] <class 'list'> 2331967448256
>>> lst1.pop()----------------------------------------------IndexError: pop from empty list
>>> [].pop()-----------------------------------------------IndexError: pop from empty list
>>> list().pop()-------------------------------------------IndexError: pop from empty list
--------------------------------------------------------------------------------------------------------------------------------------------------------------
6. clear()
---------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   listobj.clear()
=>This Function Removes all Elements from List Object
=>When we call this function on empty list object then we get Space OR None As Result
------------------
Examples
-------------------
>>> lst1=[10,20,30,10,20]
>>> print(lst1,type(lst1),id(lst1))------------[10, 20, 30, 10, 20] <class 'list'> 2331967441472
>>> len(lst1)--------------------------------------5
>>> lst1.clear()
>>> print(lst1,type(lst1),id(lst1))-------------[] <class 'list'> 2331967441472
>>> len(lst1)----------------------------------------0
---------------------------
>>> [].clear()
>>> print([].clear())------------------------------None
>>> print(list().clear())-------------------------None
--------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE :  del operator
----------
		Syntax-1:   del  MutableObj[Index]---------------------->Removes Single Element Based on Index
		Syntax-2:   del MutableObj[Begin:End:Step]-------->Removes  Element(s) Based on Slicing 
		Syntax-3:	   del MutableImmutable---------------------->Removes Complete Memory for Any Object
---------------------
Examples
---------------------
>>> lst=[10,"TR",34,56,78,"Python","Numpy",True]
>>> print(lst)---------------------[10, 'TR', 34, 56, 78, 'Python', 'Numpy', True]
>>> del lst[-3]
>>> print(lst)---------------------[10, 'TR', 34, 56, 78, 'Numpy', True]
>>>del lst[10]----------------------IndexError: list assignment index out of range
>>> del lst[2:5]
>>> print(lst)---------------------[10, 'TR', 'Numpy', True]
>>> lst=[10,"TR",34,56,78,"Python","Numpy",True]
>>> print(lst)--------------------[10, 'TR', 34, 56, 78, 'Python', 'Numpy', True]
>>> del lst[::2]
>>> print(lst)-------------------['TR', 56, 'Python', True]
>>> del lst[1:]
>>> print(lst)-------------------['TR']
--------------------------------
>>> lst=[10,"TR",34,56,78,"Python","Numpy",True]
>>> print(lst)----------------[10, 'TR', 34, 56, 78, 'Python', 'Numpy', True]
>>> del lst  # Remving Complete Object 
>>> print(lst)----------------------NameError: name 'lst' is not defined.
----------------------------
>>> s="PYTHON"
>>> print(s)-------------------------------PYTHON
>>> s[0]------------------------------------'P'
>>> s[0]="J"-------------------------------TypeError: 'str' object does not support item assignment
>>> del s[0]---------------------------------TypeError: 'str' object doesn't support item deletion
>>> del s
>>> print(s)------------------------------------NameError: name 's' is not defined
--------------------------------------------------------------------------------------------------------------------------------------------------------------
7. copy()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax: listobj2=listobj1.copy()
=>This Function is used for Copying the Content of One List into another list ( Implements Shallow Copy).
--------------------------
Examples
--------------------------
>>> lst1=[10,"RS"]
>>> print(lst1,type(lst1),id(lst1))-----------------[10, 'RS'] <class 'list'> 2331967487040
>>> lst2=lst1.copy() # Shallow Copy
>>> print(lst2,type(lst2),id(lst2))----------------[10, 'RS'] <class 'list'> 2331967454272
>>> lst1.append("Python")
>>> lst2.insert(1,"GUIDO")
>>> print(lst1,type(lst1),id(lst1))----------------[10, 'RS', 'Python'] <class 'list'> 2331967487040
>>> print(lst2,type(lst2),id(lst2))----------------[10, 'GUIDO', 'RS'] <class 'list'> 2331967454272
--------------------------------------------
Examples---Deep Copy
--------------------------------------
>>> lst1=[10,"RS"]
>>> print(lst1,type(lst1),id(lst1))--------------[10, 'RS'] <class 'list'> 2331967480640
>>> lst2=lst1 # Deep Copy
>>> print(lst2,type(lst2),id(lst2))--------------[10, 'RS'] <class 'list'> 2331967480640
>>> lst1.append("NL")
>>> print(lst1,type(lst1),id(lst1))--------------[10, 'RS', 'NL'] <class 'list'> 2331967480640
>>> print(lst2,type(lst2),id(lst2))---------------[10, 'RS', 'NL'] <class 'list'> 2331967480640
>>> lst2.insert(1,"GUIDO")
>>> print(lst1,type(lst1),id(lst1))---------------[10, 'GUIDO', 'RS', 'NL'] <class 'list'> 2331967480640
>>> print(lst2,type(lst2),id(lst2))----------------[10, 'GUIDO', 'RS', 'NL'] <class 'list'> 2331967480640
---------------------------------------------------------------------------------
Examples---Slice Based Copy--Nothing But Shallow copy
----------------------------------------------------------------------------------
>>> lst1=[10,"RS",34.56]
>>> print(lst1,type(lst1),id(lst1))----------------------[10, 'RS', 34.56] <class 'list'> 2331967507712
>>> lst2=lst1[::]  # Slice Based Copy--Shallow Copy
>>> print(lst2,type(lst2),id(lst2))-----------------------[10, 'RS', 34.56] <class 'list'> 2331967504896
--------------------------------------------------------------------------------------------------------------------------------------------------------------
8. index()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   listobj.index(Value)
=>This Function gives Index of First Occurence Element.
=>The Value does not Exist in List Object then we get ValueError.
----------------------
Examples
----------------------
>>> lst=[10,20,30,40,10,20,40,10,50]
>>> print(lst)----------------------[10, 20, 30, 40, 10, 20, 40, 10, 50]
>>> lst.index(10)----------------0
>>> lst.index(20)-----------------1
>>> lst.index(200)----------------ValueError: 200 is not in list
>>> [].index(10)--------------------ValueError: 10 is not in list
>>> list().index(10)----------------ValueError: 10 is not in list
--------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE : enumerate()
---------
Syntax:   for Index,Value in enumerate(Iterable-Object):
			print(index,"---->",value)
=>This Function Prepares Table of entries of any Iterable Object with Index and Corresponding Value
NOTE1: An Iterable-Object is one which contains More than One Value
NOTE: A Non-Iterable-Object is one which contains  One Value (int, float, bool,complex,NoneType)
--------------------------
Examples
--------------------------
>>> lst=[10,20,30,10,20,40,10,50]
>>> print(lst)---------------------[10, 20, 30, 10, 20, 40, 10, 50]
>>> for x in enumerate(lst):
...		print(x)
...
			(0, 10)
			(1, 20)
			(2, 30)
			(3, 10)
			(4, 20)
			(5, 40)
			(6, 10)
			(7, 50)
>>> for x in enumerate(lst):
...		print(x[0],"--->",x[1])
...
			0 ---> 10
			1 ---> 20
			2 ---> 30
			3 ---> 10
			4 ---> 20
			5 ---> 40
			6 ---> 10
			7 ---> 50
>>> for index,value in enumerate(lst):
...		print(index,"--->",value)
...
			0 ---> 10
			1 ---> 20
			2 ---> 30
			3 ---> 10
			4 ---> 20
			5 ---> 40
			6 ---> 10
			7 ---> 50
>>> for index,value in enumerate(lst):
...		if(value==10):
...			print(index,"--->",value)
...
			0 ---> 10
			3 ---> 10
			6 ---> 10
>>> for index,value in enumerate(lst):
...		if(value==20):
...			print(index,"--->",value)
...
			1 ---> 20
			4 ---> 20
>>> for index,value in enumerate("MISSISSIPPI"):
...		print(index,"--->",value)
...
			0 ---> M
			1 ---> I
			2 ---> S
			3 ---> S
			4 ---> I
			5 ---> S
			6 ---> S
			7 ---> I
			8 ---> P
			9 ---> P
			10 ---> I
>>> for index,value in enumerate("MISSISSIPPI"):
...		if(value=="I"):
...			print(index,"--->",value)
...
		1 ---> I
		4 ---> I
		7 ---> I
		10 ---> I

>>> for index,value in enumerate("MISSISSIPPI"):
...		if(value=="S"):
...			 print(index,"--->",value)
...
			2 ---> S
			3 ---> S
			5 ---> S
			6 ---> S
>>> a=10
>>> for index,value in enumerate(a):
...		print(index,"--->",value)-------------------TypeError: 'int' object is not iterable
--------------------------------------------------------------------------------------------------------------------------------------------------------
9. count()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   listobj.count(Value)
=>This Function is used for Finding Frequency(Number of Occurences) of the Specified Value.
=>The Specified Value does not exist then we get 0 as count.
---------------------------
Examples
---------------------------
>>> lst=[10,20,30,10,20,40,10,50]
>>> print(lst)-------------------------[10, 20, 30, 10, 20, 40, 10, 50]
>>> lst.count(10)--------------------3
>>> lst.count("10")-----------------0
>>> lst.count(200)------------------0
>>> lst.count(40)-------------------1
>>> lst.count(20)-------------------2
>>> lst.count(50)-------------------1
>>> s="MISSISSIPPI"
>>> lst=list(s)
>>> print(lst)-----------------------['M', 'I', 'S', 'S', 'I', 'S', 'S', 'I', 'P', 'P', 'I']
>>> lst.count("S")-----------------4
>>> lst.count("I")------------------4
>>> lst.count("P")-----------------2
>>> lst.count("K")----------------0
--------------------------------------------------------------------------------------------------------------------------------------------------------------
10. reverse()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  listobj2=listobj1.reverse()
				OR
			listobj1.reverse()
=>This Function reverse the Elements of listobj1 and placed the reversed Elements in listobj1 itself and never place in listobj2( listobj2 contains None )
-------------------------
Examples
-------------------------
>>> lst=[10,"RS",34.56,67,True]
>>> print(lst,id(lst))------------------[10, 'RS', 34.56, 67, True] 2254664373568
>>> lst1=lst.reverse()
>>> print(lst1)-----------------------None
>>> print(lst,id(lst))---------------[True, 67, 34.56, 'RS', 10] 2254664373568
----------------------------------------------------------
			OR
>>> lst=[10,"RS",34.56,67,True]
>>> print(lst,id(lst))-------------------[10, 'RS', 34.56, 67, True] 2254664370560
>>> lst[::-1]------------------------------[True, 67, 34.56, 'RS', 10]
>>> print(lst,id(lst))--------------------[10, 'RS', 34.56, 67, True] 2254664370560
>>> lst1=lst[::-1]
>>> print(lst1,id(lst1))------------------[True, 67, 34.56, 'RS', 10] 2254664373440
--------------------------------------------------------------------------------------------------------------------------------------------------------------
11. sort()-------------Most Imp
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax1:	listobj.sort()
=>Syntax2:	listobj.sort(reverse=False)
=>Syntax3:	listobj.sort(reverse=True)
--------------------------------
Examples
---------------------------------
>>> lst=[10,2,13,15,16,-2,0,1]
>>> print(lst,id(lst))------------------[10, 2, 13, 15, 16, -2, 0, 1] 2254664382656
>>> x=lst.sort()
>>> print(lst,id(lst))------------------[-2, 0, 1, 2, 10, 13, 15, 16] 2254664382656
>>> print(x)----------------------------None
------------------------
>>> lst=[10,2,13,15,16,-2,0,1]
>>> print(lst,id(lst))-------------------[10, 2, 13, 15, 16, -2, 0, 1] 2254664368704
>>> lst.sort()
>>> print(lst,id(lst))---------------------[-2, 0, 1, 2, 10, 13, 15, 16] 2254664368704
>>> lst.reverse()
>>> print(lst,id(lst))--------------------[16, 15, 13, 10, 2, 1, 0, -2] 2254664368704
-------------------------------------
>>> lst=[10,2,13,15,16,-2,0,1]
>>> print(lst,id(lst))--------------------[10, 2, 13, 15, 16, -2, 0, 1] 2254664383488
>>> lst.sort(reverse=True)
>>> print(lst,id(lst))--------------------[16, 15, 13, 10, 2, 1, 0, -2] 2254664383488
-------------------------------------
>>> lst=[10,2,13,15,16,-2,0,1]
>>> print(lst,id(lst))------------------[10, 2, 13, 15, 16, -2, 0, 1] 2254664401472
>>> lst.sort(reverse=False)
>>> print(lst,id(lst))------------------[-2, 0, 1, 2, 10, 13, 15, 16] 2254664401472
-------------------------------------
>>> lst=["Rossum","Rajesh","Ramesh","Trump","Putin"]
>>> print(lst,id(lst))-------------['Rossum', 'Rajesh', 'Ramesh', 'Trump', 'Putin'] 2254664373376
>>> lst.sort()
>>> print(lst,id(lst))--------------['Putin', 'Rajesh', 'Ramesh', 'Rossum', 'Trump'] 2254664373376
--------------------------
>>> lst=[10,"RS",34.56,True,2+3j]
>>> print(lst,id(lst))----------[10, 'RS', 34.56, True, (2+3j)] 2254664402112
>>> lst.sort()-----------------------TypeError: '<' not supported between instances of 'str' and 'int'
--------------------------------------------------------------------------------------------------------------------------------------------------------------
12. extend()
---------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  listobj1.extend(listobj2)
=>This Function is used for Merging the Elements of listobj2 with Listobj1. But It can't Merge More  than more than List Object.
			OR
Syntax:    listobj1=listobj1+listobj2+...........+listobj-n
-------------------
>>> lst1=[10,20,30]
>>> lst2=["RS","TR","DR"]
>>> print(lst1,id(lst1))------------------------[10, 20, 30] 2254664401088
>>> print(lst2,id(lst2))------------------------['RS', 'TR', 'DR'] 2254664373376
>>> lst1.extend(lst2)
>>> print(lst1,id(lst1))------------------------[10, 20, 30, 'RS', 'TR', 'DR'] 2254664401088
-------------------------------
>>> lst1=[10,20,30]
>>> lst2=["RS","TR","DR"]
>>> print(lst1,id(lst1))---------------------[10, 20, 30] 2254664407360
>>> print(lst2,id(lst2))---------------------['RS', 'TR', 'DR'] 2254664401088
>>> lst2.extend(lst1)
>>> print(lst2,id(lst2))---------------------['RS', 'TR', 'DR', 10, 20, 30] 2254664401088
----------------------------------
>>> lst1=[10,20,30]
>>> lst2=["RS","TR","DR"]
>>> lst3=[5.6,6.7,7.8]
>>> lst1.extend(lst2,lst3)-------------------------TypeError: list.extend() takes exactly one argument (2 given)
		TO Solve the above Issue,
>>> lst1.extend(lst2)
>>> lst1.extend(lst3)
>>> print(lst1,id(lst1))----------------[10, 20, 30, 'RS', 'TR', 'DR', 5.6, 6.7, 7.8]    2254664401472
----------------------Alternative Solutions-----------------------------
>>> lst1=[10,20,30]
>>> lst2=["RS","TR","DR"]
>>> lst3=[5.6,6.7,7.8]
>>> print(lst1,id(lst1))---------------[10, 20, 30] 2254664411072
>>> lst1=lst1+lst2+lst3
>>> print(lst1,id(lst1))---------------[10, 20, 30, 'RS', 'TR', 'DR', 5.6, 6.7, 7.8]    2254664401088
---------------------------------------------------------------------------------------------------------------------------------------------------------------