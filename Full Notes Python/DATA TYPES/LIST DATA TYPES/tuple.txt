			=============================================================
								tuple
			=============================================================
Index
-------------
=>What is tuple
=>Purpose of tuple
=>Notations for tuple
=>syntax for creating tuple
=>Types of Tuple Objects
=>Memory Management of tuple
=>Pre-Defined Functions tuple
=>Programming Examples
=>Inner OR Nested tuple
=>Pre-Defined functions in Nested OR Inner tuple		
=>Combinations of list and tuple
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Properties of tuple
------------------------------------------------------------------------------------------------------------------------------------------------------------------
=>'tuple' is one of the Pre-Defiend Class Names and treated as list category data type
=>The purpose of tuple data type is that " To store Multiple Values either of same type OR Different type OR 
    Both the Types  with Unique OR duplicates in single object  as CONSTANT VALUES".
=>In Otherwords, tuple object is always used for Storing CONSTANT VALUES of Same type or Different type Both the Types     with Unique OR duplicates
=>The Elements OR Values of tuple must be stored or enclosed within Braces ( ) and Values must be separated 
    by comma.
=>Syntax:      varname=(Val1,Val2,......,Val-n)
		Here varname is an object of <class, 'tuple'>

=>An Object of tuple Maintains Insertion Order.
=>On the Object of tuple, we can Perform Both Indexing and Slicing Operations.
=>An Object of tuple belongs to IMMUTABLE Object bcoz 'tuple' object does not support item assignment.
=>In Python Programming, we can Create Two types of tuple Objects. They are
			i) Empty tuple
			ii) Non-Empty tuple
------------------------
i) Empty tuple
------------------------
=>An Empty tuple is one, which does not contain any Elements OR Values and whose length is 0.
=>Syntax-1:-      varname=()
=>Syntax-2:       varname=tuple()
----------------------------
ii) Non-Empty tuple
----------------------------
=>A Non-Empty tuple is one, which  contains  Elements OR Values and whose length is > 0.
=>Syntax-1:   varname=(Val1,Val2,.....,Val-n)
=>Syntax-2:   varname=Val1,Val2,......,Val-n
=>Syntax-3:   varname=tuple(Object) # Here object belongs to Iterable Object
=>Syntax-4:   varname=(Value ,  ) # Here Value  belongs to Fundamental Data Types OR Non-Iterable object
=>Syntax-5:   varname=tuple([Object]) # Here object belongs to Non-Iterable Object
=>Syntax-6:   varname=tuple([Object , ]) # Here object belongs to Non-Iterable Object
=>Syntax-7:   varname=tuple((Object , )) # Here object belongs to Non-Iterable Object
=>Syntax-8:   varname=tuple((Object)) #Invalid Syntax------ TypeError
------------------------------------------------------------------------------------------------------------------------------------------------------------------
NOTE: The Functionality of tuple is exactly similar to list But an Object of list belongs to MUTABLE where as an object of tuple belongs to IMMUTABLE bcoz No modifications / Updations / changes can be done at same of Address of tuple object
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples
------------------------------------------------------------------------------------------------------------------------------------------------------------------
>>> t1=(10,20,10,30,20,10,40,50)
>>> print(t1,type(t1))-----------------------(10, 20, 10, 30, 20, 10, 40, 50) <class 'tuple'>
>>> t2=(100,"RS",45.67,True,2+3j)
>>> print(t2,type(t2))-----------------------(100, 'RS', 45.67, True, (2+3j)) <class 'tuple'>
--------------------------------
>>> t2=(100,"RS",45.67,True,2+3j)
>>> print(t2,type(t2))---------------------(100, 'RS', 45.67, True, (2+3j)) <class 'tuple'>
>>> t2[0]------------------------------------100
>>> t2[-1]-----------------------------------(2+3j)
>>> t2[::-1]---------------------------------((2+3j), True, 45.67, 'RS', 100)
-------------------------------------------------------------
>>> t1=(10,20,10,30,20,10,40,50)
>>> print(t1)---------------------------(10, 20, 10, 30, 20, 10, 40, 50)
>>> t1[0:3]-----------------------------(10, 20, 10)
>>> t1[::2]------------------------------(10, 10, 20, 40)
---------------------------------------------------------
>>> t2=(100,"RS",45.67,True,2+3j)
>>> print(t2,type(t2))-------------------(100, 'RS', 45.67, True, (2+3j)) <class 'tuple'>
>>> t2[0]-----------------------------------100
>>> t2[0]=200-----------------------------TypeError: 'tuple' object does not support item assignment
----------------------------------------------------------
>>> t1=()
>>> print(t1,type(t1))--------------------() <class 'tuple'>
>>> len(t1)---------------------------------0
>>> t2=tuple()
>>> print(t2,type(t2))-------------------() <class 'tuple'>
>>> len(t2)---------------------------------0
---------------------------------------------------------------
>>> t1=(10,"RS",34.56)
>>> print(t1,type(t1))------------------(10, 'RS', 34.56) <class 'tuple'>
>>> len(t1)--------------------------------3
----------------OR----------------------
>>> t2=10,"RS",True,2+3j,True
>>> print(t2,type(t2))-------------------(10, 'RS', True, (2+3j), True) <class 'tuple'>
-----------------OR------------------------
>>> s="RADAR"
>>> print(s,type(s))-----------------RADAR <class 'str'>
>>> t=tuple(s)
>>> print(t,type(t))------------------('R', 'A', 'D', 'A', 'R') <class 'tuple'>
>>> lst=[10,20,30,40,50]
>>> print(lst,type(lst))------------[10, 20, 30, 40, 50] <class 'list'>
>>> t=tuple(lst)
>>> print(t,type(t))-----------------(10, 20, 30, 40, 50) <class 'tuple'>
-----------------------------------OR--------------------------------------------
>>> t=(10)
>>> print(t,type(t))--------------------10 <class 'int'>
>>> t=(10,)
>>> print(t,type(t))--------------------(10,) <class 'tuple'>
>>> x=("Python")
>>> print(x,type(x))-------------------Python <class 'str'>
>>> x=("Python",)
>>> print(x,type(x))-------------------('Python',) <class 'tuple'>
-----------------------------------------MOST IMP
>>> a=100
>>> t=tuple(a)---------------------------TypeError: 'int' object is not iterable
>>> t=tuple(a,)--------------------------TypeError: 'int' object is not iterable
>>> t=tuple((a,) )
>>> print(t,type(t))----------------------(100,) <class 'tuple'>
>>> t=tuple([a])
>>> print(t,type(t))-------------------(100,) <class 'tuple'>
>>> t=tuple([a,])
>>> print(t,type(t))-------------------(100,) <class 'tuple'>
===========================================================================================

