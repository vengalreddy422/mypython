						Nested OR Inner Dict Part-2
									OR
							Complex Dict Concept
								OR
						Combination of dict with dict,set,tuple and list
==============================================================================================
tuple in dict-----Possible
==============================================================================================
>>> d1={"sno":10,"name":"RS","IntMarks":(16,14,18,17),"colname":"JNTU"}
>>> print(d1,type(d1))
{'sno': 10, 'name': 'RS', 'IntMarks': (16, 14, 18, 17), 'colname': 'JNTU'} <class 'dict'>
>>> for kv in d1.items():
...     print(kv,type(kv))
...
...
...
('sno', 10) <class 'tuple'>
('name', 'RS') <class 'tuple'>
('IntMarks', (16, 14, 18, 17)) <class 'tuple'>
('colname', 'JNTU') <class 'tuple'>
>>> for k,v in d1.items():
...     print(k,"--->",v,"--->",type(v),"--->",type(d1))
...
sno ---> 10 ---> <class 'int'> ---> <class 'dict'>
name ---> RS ---> <class 'str'> ---> <class 'dict'>
IntMarks ---> (16, 14, 18, 17) ---> <class 'tuple'> ---> <class 'dict'>
colname ---> JNTU ---> <class 'str'> ---> <class 'dict'>
>>> print(d1)
{'sno': 10, 'name': 'RS', 'IntMarks': (16, 14, 18, 17), 'colname': 'JNTU'}
>>> for val in d1["IntMarks"]:
...     print(val)
...
16
14
18
17
>>> d1["IntMarks"][1:3]
(14, 18)
>>> d1["IntMarks"][::3]
(16, 17)
>>> sorted(d1["IntMarks"])
[14, 16, 17, 18]
>>> tuple(sorted(d1["IntMarks"]))
(14, 16, 17, 18)
>>> print(d1)
{'sno': 10, 'name': 'RS', 'IntMarks': (16, 14, 18, 17), 'colname': 'JNTU'}
>>> d1["IntMarks"]=tuple(sorted(d1["IntMarks"])[::-1])
>>> print(d1)
{'sno': 10, 'name': 'RS', 'IntMarks': (18, 17, 16, 14), 'colname': 'JNTU'}
>>> d1["ExtMarks"]=(78,67,56,33)
>>> print(d1)
{'sno': 10, 'name': 'RS', 'IntMarks': (18, 17, 16, 14), 'colname': 'JNTU', 'ExtMarks': (78, 67, 56, 33)}
>>>
==============================================================================================
list in dict-----Possible
==============================================================================================
>>> d1={"sno":10,"name":"RS","IntMarks":[15,16,14],"cname":"JNTU"}
>>> print(d1,type(d1))
{'sno': 10, 'name': 'RS', 'IntMarks': [15, 16, 14], 'cname': 'JNTU'} <class 'dict'>
>>> for k,v in d1.items():
...     print(k,"--->",v,"--->",type(v),"--->",type(d1))
...
sno ---> 10 ---> <class 'int'> ---> <class 'dict'>
name ---> RS ---> <class 'str'> ---> <class 'dict'>
IntMarks ---> [15, 16, 14] ---> <class 'list'> ---> <class 'dict'>
cname ---> JNTU ---> <class 'str'> ---> <class 'dict'>
>>> for val in d1.get("IntMarks"):
...     print(val)
...
15
16
14
>>> d1["IntMarks"].append(18)
>>> print(d1,type(d1))
{'sno': 10, 'name': 'RS', 'IntMarks': [15, 16, 14, 18], 'cname': 'JNTU'} <class 'dict'>
>>> d1["IntMarks"].insert(1,13)
>>> print(d1,type(d1))
{'sno': 10, 'name': 'RS', 'IntMarks': [15, 13, 16, 14, 18], 'cname': 'JNTU'} <class 'dict'>
>>> d1["IntMarks"].sort(reverse=True)
>>> print(d1,type(d1))----{'sno': 10, 'name': 'RS', 'IntMarks': [18, 16, 15, 14, 13], 'cname': 'JNTU'} <class 'dict'>

>>> d1["ExtMarks"]=[44,77,55,66]
>>> print(d1,type(d1))
{'sno': 10, 'name': 'RS', 'IntMarks': [16, 14, 13, 18], 'cname': 'JNTU', 'ExtMarks': [44, 77, 55, 66]} <class 'dict'>

>>> x=[d1["IntMarks"][0]+d1["ExtMarks"][0],d1["IntMarks"][1]+d1["ExtMarks"][1],d1["IntMarks"][2]+d1["ExtMarks"][2]]
>>> print(x)
[60, 91, 68]
>>> d1["tot"]=x
>>> print(d1)
{'sno': 10, 'name': 'RS', 'IntMarks': [16, 14, 13, 18], 'cname': 'JNTU', 'ExtMarks': [44, 77, 55, 66], 'tot': [60, 91, 68]}
==============================================================================================
dict in set---Not Possible to Define
==============================================================================================
>>> s1={10,"RS",{"CM":15,"CPP":17,"PYM":18},"JNTU"}-----TypeError: unhashable type: 'dict'
==============================================================================================
dict in tuple--Possible to Define
==============================================================================================
>>> t1=(10,"RS",{"CM":15,"CPP":17,"PYM":18},"JNTU")
>>> print(t1,type(t1))------------(10, 'RS', {'CM': 15, 'CPP': 17, 'PYM': 18}, 'JNTU') <class 'tuple'>
>>> for val in t1:
...     print(val,"--->",type(val),"--->",type(t1))
...
		10 ---> <class 'int'> ---> <class 'tuple'>
		RS ---> <class 'str'> ---> <class 'tuple'>
		{'CM': 15, 'CPP': 17, 'PYM': 18} ---> <class 'dict'> ---> <class 'tuple'>
		JNTU ---> <class 'str'> ---> <class 'tuple'>
>>> print(t1)-----------------(10, 'RS', {'CM': 15, 'CPP': 17, 'PYM': 18}, 'JNTU')
>>> t1[2]-----------------{'CM': 15, 'CPP': 17, 'PYM': 18}
>>> for kv in t1[2].items():
...     print(kv)
...
('CM', 15)
('CPP', 17)
('PYM', 18)
>>> for k,v in t1[2].items():
...     print(k,"-->",v)
...
CM --> 15
CPP --> 17
PYM --> 18
>>> print(t1)
(10, 'RS', {'CM': 15, 'CPP': 17, 'PYM': 18}, 'JNTU')
>>> t1[2]["OS"]=14
>>> print(t1)
(10, 'RS', {'CM': 15, 'CPP': 17, 'PYM': 18, 'OS': 14}, 'JNTU')
>>> t1[2].pop("CPP")
17
>>> print(t1)
(10, 'RS', {'CM': 15, 'PYM': 18, 'OS': 14}, 'JNTU')
=====================================x===============================================
Misc Point of Dict
------------------------------------------------------------------------
>>> lst1=[10,20,30]
>>> lst2=["RS","TR","DR"]
>>> z=zip(lst1,lst2)
>>> print(z,type(z))------------------------------<zip object at 0x000001BEF4C8FC40> <class 'zip'>
>>> d=dict(z)
>>> print(d,type(d))-----------------------------{10: 'RS', 20: 'TR', 30: 'DR'} <class 'dict'>
--------------------------------------------
>>> lst1=[10,20,30]
>>> lst2=["RS","TR","DR"]
>>> d=dict(zip(lst1,lst2))
>>> print(d,type(d))----------------------{10: 'RS', 20: 'TR', 30: 'DR'} <class 'dict'>
--------------------------------------------
>>> lst1=[10,20,30]
>>> tpl=("KV","DR","TR")
>>> d=dict(zip(lst1,tpl))
>>> print(d,type(d))-----------------{10: 'KV', 20: 'DR', 30: 'TR'} <class 'dict'>
--------------------------------------------
>>> lst=[(10,"Python"),(20,"C"),(30,"CPP")]
>>> print(lst,type(lst))---------------------[(10, 'Python'), (20, 'C'), (30, 'CPP')] <class 'list'>
>>> d=dict(lst)
>>> print(d)-----------------------------------{10: 'Python', 20: 'C', 30: 'CPP'}
>>> lst=[[10,"Python"],(20,"C"),{30,"CPP"}]
>>> d=dict(lst)
>>> print(d)---------------------------------{10: 'Python', 20: 'C', 'CPP': 30}
--------------------------------------------------
>>> lst=["a1","b1","c1"]
>>> print(lst)---------------------------------['a1', 'b1', 'c1']
>>> d=dict(lst)
>>> print(d,type(d))-------------------------{'a': '1', 'b': '1', 'c': '1'} <class 'dict'>
>>> lst=["a1","a2","a2"]
>>> d=dict(lst)
>>> print(d)-----------------------------------{'a': '2'}
>>> lst=["a1","a2","a3"]
>>> d=dict(lst)
>>> print(d)-----------------------------------{'a': '3'}
>>> lst=["a11","b12","c13"]
>>> d=dict(lst)---------------------------------ValueError: dictionary update sequence element #0 has length 3; 2 is required
--------------------------------------------
>>> d1={10:1.2,20:2.3,30:3.4}
>>> print(d1)
{10: 1.2, 20: 2.3, 30: 3.4}
>>> for x in d1.keys():
...     print(x)
...
10
20
30
>>> for x in d1.values():
...     print(x)
...
1.2
2.3
3.4
>>> for x in d1.items():
...     print(x)
...
(10, 1.2)
(20, 2.3)
(30, 3.4)
>>> for x in d1:
...     print(x)
...
10
20
30
>>>
=======================================x=========================================