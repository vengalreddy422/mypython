			========================================================
						Pre-Defined Functions in  Dict
			========================================================
=>On Dict Object, we can Perform the Following Operations.

			1. We can Det Value of Value by passing Value of Key
			2. We can Modify the Old Value of Value by passing Value of Key
			3. We can Add the (Key,Value) to Dict Object.
=>Along with the Above Operations, we can also Perform Various Operations by using the Pre-Defined functions Present in Dict Object.
---------------------------------------------------------------------------------------------------------------------------------------------------------
1. clear()
---------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    dictobj.clear()
=>This function is used for Removing all the (Key,value) from dict Object.
=>When we call this function on empty dict object then we get None OR Space as Result.
-----------------------
Examples
-----------------------
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1),id(d1))----------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'> 2737305929280
>>> len(d1)---------------------------------------4
>>> d1.clear()
>>> print(d1,type(d1),id(d1))-----------------{} <class 'dict'> 2737305929280
>>> len(d1)----------------------------------------0
>>> print(d1.clear())----------------------------None
		OR
>>> d1.clear()--------------------------------------Space
		OR
>>> print({}.clear())-------------------------------None
>>> print(dict().clear())--------------------------None
--------------------------------------------------------------------------------------------------------------------------------------------------------
2. pop()
--------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax: dictobj.pop(key)
=>This Function Removes (Key,Value) from Dict Object
=>If the Value of Key does not Exist in Dict Object then we get KeyError
-------------------------
Examples
-------------------------
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1),id(d1))-------------------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'> 2737305936448
>>> d1.pop(10)-------------------------------------------1.2
>>> print(d1,type(d1),id(d1))-------------------------{20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'> 2737305936448
>>> d1.pop(40)------------------------------------------4.5
>>> print(d1,type(d1),id(d1))-------------------------{20: 2.3, 30: 2.3} <class 'dict'> 2737305936448
>>> d1.pop(30)----------------------------------------2.3
>>> print(d1,type(d1),id(d1))------------------------{20: 2.3} <class 'dict'> 2737305936448
>>> d1.pop(300)------------------------------------------KeyError: 300
>>> {}.pop(10)------------------------------------------------KeyError: 10
>>> dict().pop(10)-------------------------------------------KeyError: 10
--------------------------------------------------------------------------------------------------------------------------------------------------------
3.popitem()
--------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:     dictobj.popitem()
=>This Function Removes Last (Key,Value) from Dict Object.
=>When we call this function on empty dict object then we get KeyError.
----------------------------------------
Examples
-----------------------------------------
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1),id(d1))--------------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'> 2737305928576
>>> d1.popitem()---------------------------------(40, 4.5)
>>> print(d1,type(d1),id(d1))------------------{10: 1.2, 20: 2.3, 30: 2.3} <class 'dict'> 2737305928576
>>> d1.popitem()---------------------------------(30, 2.3)
>>> print(d1,type(d1),id(d1))-------------------{10: 1.2, 20: 2.3} <class 'dict'> 2737305928576
>>> d1.popitem()-----------------------------------(20, 2.3)
>>> print(d1,type(d1),id(d1))------------------{10: 1.2} <class 'dict'> 2737305928576
>>> d1.popitem()-----------------------------------(10, 1.2)
>>> print(d1,type(d1),id(d1))-----------------------{} <class 'dict'> 2737305928576
>>> d1.popitem()---------------------------------------KeyError: 'popitem(): dictionary is empty'
>>> dict().popitem()-----------------------------------KeyError: 'popitem(): dictionary is empty'
>>> {}.popitem()----------------------------------------KeyError: 'popitem(): dictionary is empty'
>>> {"A":1,"B":2,"C":3}.popitem()----------------('C', 3)
--------------------------------------------------------------------------------------------------------------------------------------------------------
4. copy()
--------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   DictObj2=DictObj1.copy()
=>This Function Copies the content of DictObj1 into DictObj2 ( Implements Shallow Copy).
----------------------------------------
Examples
---------------------------------------
>>> d1={10:1.2,20:2.2,30:1.2}
>>> print(d1,type(d1),id(d1))-----------------{10: 1.2, 20: 2.2, 30: 1.2} <class 'dict'> 2601941063232
>>> d2=d1.copy() # Shallow copy
>>> print(d2,type(d2),id(2))-------------------{10: 1.2, 20: 2.2, 30: 1.2} <class 'dict'> 140723923649480
>>> d1[10]=12.34
>>> d2[40]=4.5
>>> print(d1,type(d1),id(d1))-----------------{10: 12.34, 20: 2.2, 30: 1.2} <class 'dict'> 2601941063232
>>> print(d2,type(d2),id(2))-------------------{10: 1.2, 20: 2.2, 30: 1.2, 40: 4.5} <class 'dict'> 140723923649480
--------------------------------------------------------------------------------------------------------------------------------------------------------
5. get(key)--Most Imp
--------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  val=dictobj.get(key)
=>This Function Obtains Value of Value by Passing Value of Key.
=>If the Value of Key does  not Exist then we get None as Result.
				OR
		Value=dictobj[Key]
=>This Syntax gives Value of Value by passing Value of Key.
=>If key does not exist then we get KeyError.
-------------------------------
Examples
-------------------------------
>>> d1={10:1.2,20:2.2,30:1.2,40:2.3}
>>> print(d1)-----------------------------{10: 1.2, 20: 2.2, 30: 1.2, 40: 2.3}
>>> val=d1.get(30)
>>> print(val)------------------------1.2
>>> val=d1.get(20)
>>> print(val)------------------------2.2
>>> val=d1.get(200)
>>> print(val)------------------------None
		OR
>>> d1={10:1.2,20:2.2,30:1.2,40:2.3}
>>> print(d1)---------------------------------{10: 1.2, 20: 2.2, 30: 1.2, 40: 2.3}
>>> d1[10]------------------------------------1.2
>>> d1[20]-------------------------------------2.2
>>> d1[30]-------------------------------------1.2
>>> d1[300]-----------------------------------KeyError: 300
--------------------------------------------------------------------------------------------------------------------------------------------------------
6. keys()
--------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   varname=dictobj.keys()
=>This Function obtains List of Keys and placed in LHS Varname and whose type is <class, dict_keys>
------------------------------
Examples
------------------------------
>>> d1={10:1.2,20:2.2,30:1.2,40:2.3}
>>> print(d1,type(d1))----------------------------{10: 1.2, 20: 2.2, 30: 1.2, 40: 2.3} <class 'dict'>
>>> ks=d1.keys()
>>> print(ks,type(ks))----------------------------dict_keys([10, 20, 30, 40]) <class 'dict_keys'>
>>> for k in ks:
...		print(k)
...
		10
		20
		30
		40
>>> for k in d1.keys():
...		print(k)
...
			10
			20
			30
			40
--------------------------------------------------------------------------------------------------------------------------------------------------------
7. values()
--------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:   varname=dictobj.values()
=>This function obtains List of Values from Dict Object and placed in LHS Varname and whose type is <class, dict_values>
---------------------------------------
Examples
---------------------------------------
>>> d1={10:1.2,20:2.2,30:1.2,40:2.3}
>>> print(d1,type(d1))--------------------{10: 1.2, 20: 2.2, 30: 1.2, 40: 2.3} <class 'dict'>
>>> vs=d1.values()
>>> print(vs,type(vs))--------------------dict_values([1.2, 2.2, 1.2, 2.3]) <class 'dict_values'>
>>> for v in vs:
...		print(v)
...
		1.2
		2.2
		1.2
		2.3
>>> for v in d1.values():
...		print(v)
...
		1.2
		2.2
		1.2
		2.3
--------------------------------------------------------------------------------------------------------------------------------------------------------
8. items()
--------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax: varname=dictobj.items()
=>This Function obtains (Key,value) from Dict Object and placed in LHS Varname and whose type is <class, dict_items>
-------------------------------
Examples
-------------------------------
>>> d1={10:1.2,20:2.2,30:1.2,40:2.3}
>>> print(d1,type(d1))-----------------------------{10: 1.2, 20: 2.2, 30: 1.2, 40: 2.3} <class 'dict'>
>>> kvs=d1.items()
>>> print(kvs,type(kvs))--------------------------dict_items([(10, 1.2), (20, 2.2), (30, 1.2), (40, 2.3)]) <class 'dict_items'>
>>> for kv in kvs:
...		print(kv)
...
		(10, 1.2)
		(20, 2.2)
		(30, 1.2)
		(40, 2.3)
>>> for kv in kvs:
...		print(kv[0],"--->",kv[1])
...
		10 ---> 1.2
		20 ---> 2.2
		30 ---> 1.2
		40 ---> 2.3

>>> for k,v in kvs:
...		print(k,"--->",v)
...
		10 ---> 1.2
		20 ---> 2.2
		30 ---> 1.2
		40 ---> 2.3
>>> for kv in d1.items():
...		print(kv)
...
		(10, 1.2)
		(20, 2.2)
		(30, 1.2)
		(40, 2.3)
>>> for k,v in d1.items():
...		print(k,"--->",v)
...
		10 ---> 1.2
		20 ---> 2.2
		30 ---> 1.2
		40 ---> 2.3
---------------------------------------------------------------------------------------------------------------------------------------------------------
9. update()
---------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    DictObj1.update(DictObj2)
=>This Function merges the content of DictObj2 with DictObj1.
------------------------------
Examples
------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={30:11.2,40:12.3}
>>> d1.update(d2)
>>> print(d1,type(d1))-----------------------{10: 1.2, 20: 2.3, 30: 11.2, 40: 12.3} <class 'dict'>
--------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={20:11.2,40:12.3}
>>> d1.update(d2)
>>> print(d1,type(d1))------------------{10: 1.2, 20: 11.2, 40: 12.3} <class 'dict'>
------------------------------------------------------
>>> d1={10:1.2,20:2.3}
>>> d2={10:11.2,20:12.3}
>>> d2.update(d1)
>>> print(d2,type(d2))-----------------------{10: 1.2, 20: 2.3} <class 'dict'>
--------------------------------------------------------------------------------------------------------------------------------------------------------
