			=========================================================
						Dict Category Data Type 
			=========================================================
			Index
--------------------------------
=>What is Dict
=>Purpose of Dict
=>Notations of Dict
=>Memory Mgmt of Dict
=>Types of Dict objects
=>Pre-Defined Functions in  Dict
=>Programming Examples
=>Nested OR Inner Dict
=>Combination of Dict with Dict,set,list, tuple
=>Programming Examples
=============================================================================================
=>In Dict Category, we have 1 Data Type  whose name is 'dict'.
=>Here 'dict' is  Pre-Defined Class.
=>The purpose of dict object is that "To store the Data in the form of (Key,Value)".
=>In (Key,Value), the Values of Key Represents Unique where as the Values of Value may or may not be Unique.
=>To Store  (Key,Value)  in dict object, They Must be enclosed within Curly Braces and Separated by Comma.
=>Syntax:   varname={Key1:Val1,Key2:Val2,.......,Key-n:Val-n}
			here Key1, Key2...., Key-n are called Values of Key
			Here Val1,val2-.....Val-n are called Values of Value.
=>An Object of Dict maintains Insertion Order.
=>On the Object of Dict , we can't Perform Indexing and Slicing Operations bcoz Values of Key Itself acts as Indices.
=>An Object of Dict belongs to MUTABLE bcoz we are Modifying the Values of Value Based on the Value of Key.
=>In Dict (Key,Value), The Values of Key are IMMUTABLE bcoz we can't  change their Value  and the Values of value belongs  to MUTABLE bcoz we the able change the Values of Value based on Key.
=>We can create Two types of Dict Objects. They are

				1. Empty Dict Object
				2. Non-Empty Dict Object
----------------------------------------------
1. Empty Dict Object
----------------------------------------------
=>An Empty Dict does not contain any Elements and whose Length is Zero
=>Syntax:   dictobj={}
			OR
		    dictobj=dict()
----------------------------------------------
2. Non-Empty Dict Object
----------------------------------------------
=>A Non-Empty Dict contains  Elements and whose Length is >0
=>Syntax:  varname={Key1:Val1,Key2:Val2,.......,Key-n:Val-n}
			here Key1, Key2...., Key-n are called Values of Key
			Here Val1,val2-.....Val-n are called Values of Value.
------------------------------------------------------
=>Syntax for adding (Key,Value) to Empty / Non-Empty Dict Object
------------------------------------------------------
			DictObj[Key1]=Val1
			DictObj[Key2]=Val2
			---------------------------
			---------------------------
			DictObj[Key-n]=Val-n

here Key1, Key2...., Key-n are called Values of Key
Here Val1,val2-.....Val-n are called Values of Value.
------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Examples
--------------------------------------------------------------------------------------------------------------------------------------------------------------
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1))-------------------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'>
>>> d2={"Python":1,"C":2,"C++":2,"Java":3}
>>> print(d2,type(d2))-------------------------{'Python': 1, 'C': 2, 'C++': 2, 'Java': 3} <class 'dict'>
---------------------------------------
>>> d2={"Python":1,"C":2,"C++":2,"Java":3}
>>> print(d2,type(d2))-----------------------------{'Python': 1, 'C': 2, 'C++': 2, 'Java': 3} <class 'dict'>
>>> d2[0]----------------------------------------------KeyError: 0
>>> d2["Python"]-----------------------------------1
>>> d2["C"]-------------------------------------------2
>>> d2["C++"]---------------------------------------2
>>> d2["HTML"]-------------------------------------KeyError: 'HTML'
>>> d2[0:4]------------------------------------------KeyError: slice(0, 4, None)
------------------------------------------------
>>> d2={"Python":1,"C":2,"C++":2,"Java":3}
>>> print(d2,type(d2))--------------------------{'Python': 1, 'C': 2, 'C++': 2, 'Java': 3} <class 'dict'>
>>> for x in enumerate(d2):
...		print(x)
...
			(0, 'Python')
			(1, 'C')
			(2, 'C++')
			(3, 'Java')
>>> for x in enumerate(d2):
...		print(x[0])
...
			0
			1
			2
			3
>>> for x in enumerate(d2):
...		print(x[1])
...
		Python
		C
		C++
		Java
>>> for x in enumerate(d2):
...		print(x)
...
		(0, 'Python')
		(1, 'C')
		(2, 'C++')
		(3, 'Java')

>>> for x in enumerate(d2):
...		print(x,"--->",d2[x[1]])
...
		(0, 'Python') ---> 1
		(1, 'C') ---> 2
		(2, 'C++') ---> 2
		(3, 'Java') ---> 3
------------------------------------------------
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1))------------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'>
>>> for k in enumerate(d1):
...		print(k,type(k))
...
			(0, 10) <class 'tuple'>
			(1, 20) <class 'tuple'>
			(2, 30) <class 'tuple'>
			(3, 40) <class 'tuple'>
>>> for k in enumerate(d1):
...		print(k[0],"--->",k[1])
...
			0 ---> 10
			1 ---> 20
			2 ---> 30
			3 ---> 40
>>> for k in enumerate(d1):
...		print(k[0],"--->",k[1],"---->",d1[k[1]])
...
		0 ---> 10 ----> 1.2
		1 ---> 20 ----> 2.3
		2 ---> 30 ----> 2.3
		3 ---> 40 ----> 4.5
-------------------------------------------------------------------------
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1),id(d1))-----------------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'> 2737305927936
>>> d1[10]------------------------------------------1.2
>>> print(d1,type(d1),id(d1))-------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'> 2737305927936
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1),id(d1))--------------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'> 2737305928384
>>> d1[30]=4.4  # Modifying the value of Value based on Key
>>> print(d1,type(d1),id(d1))---------------------{10: 1.2, 20: 2.3, 30: 4.4, 40: 4.5} <class 'dict'> 2737305928384
----------------------------------------------------------
>>> d3={10:1.2,10:2.3,10:3.4,10:4.5}
>>> print(d3,type(d3))----------------------------{10: 4.5} <class 'dict'>
----------------------------------------------------------
>>> d1={}
>>> print(d1,type(d1))------------------{} <class 'dict'>
>>> len(d1)--------------------------------0
>>> d2=dict()
>>> print(d2,type(d2))-------------------{} <class 'dict'>
>>> len(d2)---------------------------------0
>>> d1={10:1.2,20:2.3,30:2.3,40:4.5}
>>> print(d1,type(d1))--------------------{10: 1.2, 20: 2.3, 30: 2.3, 40: 4.5} <class 'dict'>
>>> len(d1)----------------------------------4
------------------------------------------------------------
MOST IMP
*******************************************************
>>> d1={}
>>> print(d1,type(d1),id(d1))---------------{} <class 'dict'> 2737305928384
>>> d1[100]=2.3  # Inserted Entry
>>> d1[200]=4.3 # Inserted Entry
>>> d1[300]=1.2 # Inserted Entry
>>> print(d1,type(d1),id(d1))--------------{100: 2.3, 200: 4.3, 300: 1.2} <class 'dict'> 2737305928384
>>> len(d1) ---------------3
>>> d1[400]=1.2  # # Inserted Entry
>>> print(d1,type(d1),id(d1))--------------{100: 2.3, 200: 4.3, 300: 1.2, 400: 1.2} <class 'dict'> 2737305928384
>>> len(d1)----------------4
>>> d1[100]=12.3  # Modified Entry
>>> print(d1,type(d1),id(d1))------------{100: 12.3, 200: 4.3, 300: 1.2, 400: 1.2} <class 'dict'> 2737305928384
>>> len(d1)-----------------------------------4
-------------------------------------------------------------------------------------------------------------------------------------------------------------