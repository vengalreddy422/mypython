				==========================================================
								1. set
				==========================================================
Index
--------------------------------
=>What is set
=>Purpose of set
=>Notations of set
=>Memory Mgmt of set
=>Types of set objects
=>Pre-Defined Functions in set
=>Programming Examples
=>Nested OR Inner Sets
=>Combination of set with list and tuple.
=>Programming Examples
=>Problem Statements with Ven Diagrams.
-----------------------------------------------------------------------------------------------------------------------------------------------------------
Properties of set
-----------------------------------------------------------------------------------------------------------------------------------------------------------
=>Here'set' is a Pre-Defined Class and Treated as Set Category Data type.
=>The Purpose of set Data type is that "To store Multiple Values either of Same Type or Different Type OR 
    Both the Types in single Object with Unique Values Only (Duplicates are not allowed)."
=>To Store the Elements in set object, we use Curly Braces {} and Values Separated by Comma.
=>Syntax:    setobj={Val1,Val2,......,Val-n}
=>An Object of Set Never Maintains Insertion Order bcoz PVM displays Any One of the Possiblity of the Elements of 
   Set.
=>On the Object of set, we can't Perform Indexing and Slicing Operations bcoz set object does not maintain Insertion 
   Order.
=>An Object of set belongs to Both MUTABLE  in the case Adding, Remvoing,...etc and IMMUTABLE in the case of Item  Assignment.
=>In Python Programming, we can create Two Types of Set Objects. They are
				i) Empty Set
				ii) Non-Empty Set
-------------------------------
i) Empty Set
-------------------------------
=>An Empty set is one, which does not contain any Elements and whose length is 0
=>Syntax:  setobj=set()
-------------------------------
ii) Non-Empty Set
-------------------------------
=>A Non-Empty Set is one, which contains Elements and whose Length is >0
=>Syntax:    setobj={Val1,Val2,...,Val-n}

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Examples
-----------------------------------------------------------------------------------------------------------------------------------------------------------
>>> s1={10,20,30,40,50,10,20,30}
>>> print(s1,type(s1))------------------------{50, 20, 40, 10, 30} <class 'set'>
>>> s2={10,"RS",45.67,True,2+3j}
>>> print(s2,type(s2))-----------------------{True, 10, (2+3j), 45.67, 'RS'} <class 'set'>
-------------------------------------
>>> s2={10,"RS",45.67,True,2+3j}
>>> print(s2,type(s2))-------------------------{True, 10, (2+3j), 45.67, 'RS'} <class 'set'>
>>> s2[0]------------------------------------------TypeError: 'set' object is not subscriptable
>>> s2[0:3]-----------------------------------------TypeError: 'set' object is not subscriptable
-----------------------------------------------
>>> lst=[10,20,30,40,50,10,20,30]
>>> print(lst,type(lst))----------------------[10, 20, 30, 40, 50, 10, 20, 30] <class 'list'>
>>> s=set(lst)
>>> print(s,type(s))--------------------------{40, 10, 50, 20, 30} <class 'set'>
>>> x=sorted(s)
>>> print(x)-------------------------------------[10, 20, 30, 40, 50]
------------------------------------------------
>>> s="MISSISSIPPI"
>>> print(s,type(s))----------------------MISSISSIPPI <class 'str'>
>>> st=set(s)
>>> print(st,type(st))--------------------{'S', 'M', 'P', 'I'} <class 'set'>
>>> "".join(sorted(st))------------------'IMPS'
>>> "".join(sorted(st)[::-1])------------'SPMI'
----------------------------------------------------
>>> s2={10,"RS",45.67,True,2+3j}
>>> print(s2,type(s2))----------------{True, 10, (2+3j), 45.67, 'RS'} <class 'set'>
>>> for ind,val in enumerate(s2):
...		print(ind,"--->",val)
...
		0 ---> True
		1 ---> 10
		2 ---> (2+3j)
		3 ---> 45.67
		4 ---> RS
>>> s2[0]----------------------------TypeError: 'set' object is not subscriptable
------------------------------------------------
>>> s2={10,"RS",45.67,True,2+3j}
>>> print(s2,type(s2),id(s2))-------------------{True, 10, (2+3j), 45.67, 'RS'} <class 'set'> 2752951423200
>>> s2[0]=False-----------------------------------TypeError: 'set' object does not support item assignment
>>> s2.add("PYTHON")
>>> print(s2,type(s2),id(s2))-------------------{True, 'PYTHON', 10, (2+3j), 45.67, 'RS'} <class 'set'> 2752951423200
>>> s2.remove("PYTHON")
>>> s2.remove(10)
>>> print(s2,type(s2),id(s2))--------------------{True, (2+3j), 45.67, 'RS'} <class 'set'> 2752951423200
---------------------------------------------------
>>> s2={10,"RS",45.67,True,2+3j}
>>> print(s2,type(s2))----------------------------{True, 10, (2+3j), 45.67, 'RS'} <class 'set'>
>>> len(s2)-------------------------------------------5
>>>
>>> s3=set()
>>> print(s3,type(s3))------------------------------set() <class 'set'>
>>> len(s3)-------------------------------------------0
>>> s4={}
>>> print(s4,type(s4))-------------------------------{} <class 'dict'>
-----------------------------------------------------------


