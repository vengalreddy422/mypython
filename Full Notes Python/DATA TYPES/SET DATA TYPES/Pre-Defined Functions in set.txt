				==============================================
							Pre-Defined Functions in set
				==============================================
=>On the Object of set, we can perform Different Type of Operations by using Pre-Defined OR Built-In Functions Present in set object. They are
--------------------------------------------------------------------------------------------------------------------------------------------------------------
1. add()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj.add(Value)
=>This Function is used for Adding an Element to the Set Object.
---------------------------
Examples
---------------------------
>>> s1={10,20,30,40}
>>> print(s1,type(s1),id(s1))-------------------------{40, 10, 20, 30} <class 'set'> 2752983337216
>>> s1.add(1.2)
>>> print(s1,type(s1),id(s1))--------------------------{1.2, 40, 10, 20, 30} <class 'set'> 2752983337216
>>> s1.add(150)
>>> print(s1,type(s1),id(s1))--------------------------{1.2, 40, 10, 20, 150, 30} <class 'set'> 2752983337216
>>> s1.add(10)
>>> print(s1,type(s1),id(s1))--------------------------{1.2, 40, 10, 20, 150, 30} <class 'set'> 2752983337216
---------------
>>> s1=set()
>>> print(s1,type(s1),id(s1))--------------set() <class 'set'> 2752983336096
>>> s1.add(10)
>>> s1.add(10.4)
>>> s1.add("Python")
>>> s1.add(True)
>>> print(s1,type(s1),id(s1))----------------{True, 10, 10.4, 'Python'} <class 'set'> 2752983336096
--------------------------------------------------------------------------------------------------------------------------------------------------------------
2. remove()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  setobj.remove(Value)
=>This Function Removes the Value from Set Object.
=>If the Value does not Exist then we get KeyError
-------------------------------
Examples
-------------------------------
>>> s1={10,20,30,40,50,60}
>>> print(s1,type(s1),id(s1))-----------------{50, 20, 40, 10, 60, 30} <class 'set'> 2752951424544
>>> s1.remove(10)
>>> print(s1,type(s1),id(s1))------------------{50, 20, 40, 60, 30} <class 'set'> 2752951424544
>>> s1.remove(30)
>>> print(s1,type(s1),id(s1))-------------------{50, 20, 40, 60} <class 'set'> 2752951424544
>>> s1.remove(300)------------------------------KeyError: 300
-----------------------
>>> set().remove(10)----------------------------KeyError: 10
--------------------------------------------------------------------------------------------------------------------------------------------------------------
3. discard()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  setobj.discard(Value)
=>This Function Removes the Value from Set Object.
=>If the Value does not Exist then we never get KeyError
-------------------------------
Examples
-------------------------------
>>> s1={10,20,30,40,50,60}
>>> print(s1,type(s1),id(s1))-----------------{50, 20, 40, 10, 60, 30} <class 'set'> 2752983337888
>>> s1.discard(10)
>>> print(s1,type(s1),id(s1))-----------------{50, 20, 40, 60, 30} <class 'set'> 2752983337888
>>> s1.discard(20)
>>> print(s1,type(s1),id(s1))-----------------{50, 40, 60, 30} <class 'set'> 2752983337888
>>> s1.discard(200)
>>> s1.remove(200)-----------------------------KeyError: 200
--------------------------------------------------------------------------------------------------------------------------------------------------------------
4. pop()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj.pop()
=>This Function Removes any Arbitary(Random) Element from set object(Order Of Display Not Given)
=>This Function Removes always First Element from set object(Order Of Display  Given)
=>When we call this Function empty set object then we get KeyError
-------------------------------
Examples
-------------------------------
>>> s1={10,20,30,40,50,60}  # Order of Display Not Given--pop() removes Arbitary Element.
>>> s1.pop()----------------------50
>>> s1.pop()----------------------20
>>> s1.pop()----------------------40
>>> s1.pop()-----------------------10
>>> s1.pop()----------------------60
>>> s1.pop()------------------------30
>>> len(s1)-------------------------0
>>> s1.pop()-----------------------KeyError: 'pop from an empty set'
>>> set().pop()---------------------KeyError: 'pop from an empty set'
-----------------------------------------
>>> s1={100,200,150,160,123,-45,67,0,12}  # Order of Display Given--pop() removes First Element.
>>> print(s1,type(s1),id(s1))-------------{160, 0, 67, 100, 200, 12, -45, 150, 123} <class 'set'> 2752983337216
>>> s1.pop()-------------------------------160
>>> s1.pop()----------------------------------0
>>> s1.pop()---------------------------------67
>>> s1.pop()--------------------------------100
>>> s1.pop()--------------------------------200
>>> s1.pop()--------------------------------12
>>> s1.pop()---------------------------------45
>>> s1.pop()---------------------------------150
>>> s1.pop()---------------------------------123
>>> s1.pop()---------------------------------KeyError: 'pop from an empty set'
--------------------------------------------------------------------------------------------------------------------------------------------------------------
5. clear()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:  setobj.clear()
=>This Function removes all the values from set object.
=>When we call this function on empty set object then we get None OR Space as Result.
--------------------------
Examples
--------------------------
>>> s1={10,20,30,40,50}
>>> print(s1,type(s1),id(s1))-----------------{50, 20, 40, 10, 30} <class 'set'> 2639606191648
>>> len(s1)----------------------------------------5
>>> s1.clear()
>>> print(s1,type(s1),id(s1))------------------set() <class 'set'> 2639606191648
>>> len(s1)----------------------------------------0
>>> print(s1.clear())---------------------------None
			OR
>>> s1.clear()-----------------------------------Space
--------------------------------------------------------------------------------------------------------------------------------------------------------------
6. copy()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:  setobj2=setobj1.copy()
=>This Function Copy the content of setobj1 into setobj2(Implements Shallow Copy)
------------------------
Examples
------------------------
>>> s1={10,20,30,40,50}
>>> print(s1,type(s1),id(s1))-------------------{50, 20, 40, 10, 30} <class 'set'> 2639606190752
>>> s2=s1.copy()
>>> print(s2,type(s2),id(s2))--------------------{50, 20, 40, 10, 30} <class 'set'> 2639606191200
>>> s1.add("Python")
>>> s2.add(2+3j)
>>> print(s1,type(s1),id(s1))---------------------{'Python', 50, 20, 40, 10, 30} <class 'set'> 2639606190752
>>> print(s2,type(s2),id(s2))---------------------{50, 20, 40, 10, (2+3j), 30} <class 'set'> 2639606191200
--------------------------------------------------------------------------------------------------------------------------------------------------------------
7. isdisjoint()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Syntax:  setobj1.isdisjoint(setobj2)
=>This Function returns True Provided There is No common Elements in SetObj1 and SetObj2.
=>This Function returns False Provided There is atleast one common Element in SetObj1 and SetObj2.
---------------------------
Examples
---------------------------
>>> s1={10,20,30}
>>> s2={15,25,35}
>>> s3={10,5,6}
>>> s1.isdisjoint(s2)-----------True
>>> s1.isdisjoint(s3)-----------False
>>> s2.isdisjoint(s3)-----------True
---------------------------------
>>> set().isdisjoint(set())------True
>>> {10,14,15}.isdisjoint(set())----True
>>> {10,14,15}.isdisjoint({12,13,14})---False
--------------------------------------------------------------------------------------------------------------------------------------------------------------
8. issuperset()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj1.issuperset(setobj2)
=>This Function returns True Provided setobj1 contains all the elements of setobj2 Otherwise returns False
------------------------
Examples
------------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,15,25}
>>> s1.issuperset(s2)--------------------True
>>> s1.issuperset(s3)--------------------False
>>> s2.issuperset(s3)--------------------False
>>> s2.issuperset(s1)--------------------False
>>> set().issuperset(set())--------True
--------------------------------------------------------------------------------------------------------------------------------------------------------------
9. issubset()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj1.issubset(setobj2)
=>This Function returns True provided all the Elements of setobj1 Present in setobj2 Otherwise Returns False.
--------------------------
Examples
--------------------------
>>> s1={10,20,30,40}
>>> s2={10,20}
>>> s3={10,15,25}
>>> s2.issubset(s1)-----------------True
>>> s2.issubset(s3)-----------------False
>>> s1.issubset(s2)-----------------False
>>> s1.issubset(s3)----------------False
>>> set().issubset(set())----------True
--------------------------------------------------------------------------------------------------------------------------------------------------------------
10. union()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj3=setobj1.union(setobj2)
=>This Function Takes all Unique Elements of SetObj1 an SetObj2 and Place them in setobj3
------------------------
Examples
------------------------
>>> s1={10,20,30,40}
>>> s2={10,20,35,45}
>>> print(s1,type(s1))-----------------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))-----------------{10, 35, 20, 45} <class 'set'>
>>> s3=s1.union(s2)
>>> print(s3,type(s3))-----------------{35, 40, 10, 45, 20, 30} <class 'set'>
>>> s2={10,20}.union({1,2},{"Python","DSA"})
>>> print(s2,type(s2))-------------{'Python', 1, 2, 20, 10, 'DSA'} <class 'set'>
--------------------------------------------------------------------------------------------------------------------------------------------------------------
11. intersection()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:      setobj3=setobj1.intersection(setobj2)
=>This Function Obtains Common Elements from setobj1 and setobj2 and Places the Result setobj3
----------------------------
Examples
-----------------------------
>>> s1={10,20,30,40}
>>> s2={10,20,35,45}
>>> print(s1,type(s1))-----------------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))-----------------{10, 35, 20, 45} <class 'set'>
>>> s3=s1.intersection(s2)
>>> print(s3,type(s3))----------------{10, 20} <class 'set'>
>>> s2={10,20}.intersection({1,2,10},{"Python","DSA",20})
>>> print(s2,type(s2))-----------set() <class 'set'>
>>> {10,20}.intersection({15,25})--------set()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
12. difference()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj3=setobj1.difference(setobj2)
=>This function removes the common elements from both setobj1 and setobj2 and Takes the Remaining Elements from setobj1 and Place them in setobj3.
----------------------------
Examples
---------------------------
>>> s1={10,20,30,40}
>>> s2={10,20,35,45}
>>> print(s1,type(s1))-----------------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))-----------------{10, 35, 20, 45} <class 'set'>
>>> s3=s1.difference(s2)
>>> print(s3,type(s3))--------------------{40, 30} <class 'set'>
>>> s4=s2.difference(s1)
>>> print(s4,type(s4))-------------------{35, 45} <class 'set'>
>>> s3={10,20,30}.difference({15,25,35})
>>> print(s3,type(s3))-------------------{10, 20, 30} <class 'set'>
>>> s3={10,20,30}.difference({10,20,30})
>>> print(s3,type(s3))-------------------set() <class 'set'>
--------------------------------------------------------------------------------------------------------------------------------------------------------------
13. symmetric_difference()  (in Maths we call this Operation as DELTA )
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj3=setobj1.symmetric_difference(setobj2)
=>This function removes the common elements from both setobj1 and setobj2 and Takes the Remaining Elements from Both setobj1 and setobj2 and Place them in setobj3.
						OR
=>Formula Syntax: setobj3=setobj1.union(setobj2).difference(setob1.intersection(setobj2))
						OR
=>Formula Syntax: setobj3=setobj1.difference(setobj2).union(setobj2.difference(setobj1 )
----------------------------
Examples
----------------------------
>>> s1={10,20,30,40}
>>> s2={10,20,35,45}
>>> print(s1,type(s1))-----------------{40, 10, 20, 30} <class 'set'>
>>> print(s2,type(s2))-----------------{10, 35, 20, 45} <class 'set'>
>>> s3=s1.symmetric_difference(s2)
>>> print(s3,type(s3))--------------------{35, 40, 45, 30} <class 'set'>
-----------------------------
>>> s4=s1.union(s2).difference(s1.intersection(s2))   # By Formula
>>> print(s4,type(s4))-------------{40, 35, 45, 30} <class 'set'>
----------------------------------------
>>> s5=s1.difference(s2).union(s2.difference(s1))
>>> print(s5,type(s5))-------------{40, 35, 45, 30} <class 'set'>
>>> {10,20}.symmetric_difference({10,20})-------------set()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
14. difference_update()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj1.difference_update(setobj2)
=>This function removes the common elements from both setobj1 and setobj2 and Takes the Remaining Elements from setobj1 and Place them in setobj1 Itself.
------------------------
Examples
------------------------
>>> s1={10,20,30,40}
>>> s2={10,20,15,25}
>>> s1.difference_update(s2)
>>> print(s1)--------------------------{40, 30}
>>> s1={10,20,30,40}
>>> s2={10,20,15,25}
>>> s2.difference_update(s1)
>>> print(s2)-----------------------{25, 15}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
15. symmetric_difference_update()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj1.symmetric_difference_update(setobj2)
=>This function removes the common elements from both setobj1 and setobj2 and Takes the Remaining Elements from Both setobj1 and setobj2 and Place them in setobj1 Itself.
--------------------------------
Examples
---------------------------------
>>> s1={10,20,30,40}
>>> s2={10,20,15,25}
>>> s1.symmetric_difference_update(s2)
>>> print(s1)----------------------{40, 15, 25, 30}
-----------------------
>>> s1={10,20,30,40}
>>> s2={10,20,15,25}
>>> s2.symmetric_difference_update(s1)
>>> print(s2)------------------{40, 15, 25, 30}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
16. interection_update()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:   setobj1.interection_update(setobj2)
=>This Function Obtains Common Elements from setobj1 and setobj2 and Places the Result setobj1 Itself.
-----------------------
Examples
-----------------------
>>> s1={10,20,30,40}
>>> s2={10,20,15,25}
>>> s1.intersection_update(s2)
>>> print(s1)-----------------------{10, 20}
--------------------
>>> s1={10,20,30,40}
>>> s2={10,20,15,25}
>>> s2.intersection_update(s1)
>>> print(s2)--------{10, 20}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
17. update()
--------------------------------------------------------------------------------------------------------------------------------------------------------------
=>Syntax:    setobj3=setobj1.update(setobj2)
=>This Function Merge the Elements of setobj2 with SetObj1  and Updated Elements in setobj1 Itself and Never Place the Updated Elements in setobj3 (setobj3 Contains None)
----------------------
Examples
-----------------------
>>> s1={10,20,30}
>>> s2={15,25,35}
>>> print(s1)-------------------{10, 20, 30}
>>> print(s2)-------------------{25, 35, 15}
>>> s3=s1.update(s2)
>>> print(s3)-------------------None
>>> print(s1)-------------------{35, 20, 25, 10, 30, 15}
----------------------------
>>> s1={10,20,30}
>>> s2={10,20,35}
>>> s1.update(s2)
>>> print(s1)--------------------{35, 20, 10, 30}
-------------------------------
>>> s2={10,20,30}
>>> s1.update(s2)
>>> print(s1)------------------{20, 10, 30}
-----------------------
NOTE:
-----------------------
>>> x=set(range(10,21,2))
>>> print(x)-----------------------------{10, 12, 14, 16, 18, 20}
>>> x=set(range(10,0,-1))
>>> print(x)-----------------------------{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
>>> x=set(range(100,401,50))
>>> print(x)------------------------------{100, 200, 300, 400, 150, 250, 350}
--------------------------------------------------------------------------------------------------------------------------------------------------------------

